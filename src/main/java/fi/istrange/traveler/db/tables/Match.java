/*
 * This file is generated by jOOQ.
*/
package fi.istrange.traveler.db.tables;


import fi.istrange.traveler.db.Keys;
import fi.istrange.traveler.db.Public;
import fi.istrange.traveler.db.tables.records.MatchRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Match extends TableImpl<MatchRecord> {

    private static final long serialVersionUID = -484841421;

    /**
     * The reference instance of <code>public.match</code>
     */
    public static final Match MATCH = new Match();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchRecord> getRecordType() {
        return MatchRecord.class;
    }

    /**
     * The column <code>public.match.liker_card_id</code>.
     */
    public final TableField<MatchRecord, Long> LIKER_CARD_ID = createField("liker_card_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.match.liked_card_id</code>.
     */
    public final TableField<MatchRecord, Long> LIKED_CARD_ID = createField("liked_card_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.match.like_decision</code>.
     */
    public final TableField<MatchRecord, Boolean> LIKE_DECISION = createField("like_decision", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.match</code> table reference
     */
    public Match() {
        this("match", null);
    }

    /**
     * Create an aliased <code>public.match</code> table reference
     */
    public Match(String alias) {
        this(alias, MATCH);
    }

    private Match(String alias, Table<MatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Match(String alias, Table<MatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MatchRecord> getPrimaryKey() {
        return Keys.TRAVELER_MATCH_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MatchRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchRecord>>asList(Keys.TRAVELER_MATCH_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MatchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MatchRecord, ?>>asList(Keys.MATCH__MATCH_LIKER_ID_FKEY, Keys.MATCH__MATCH_LIKED_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Match as(String alias) {
        return new Match(alias, this);
    }

    /**
     * Rename this table
     */
    public Match rename(String name) {
        return new Match(name, null);
    }
}
