/*
 * This file is generated by jOOQ.
*/
package fi.istrange.traveler.db.tables.daos;


import fi.istrange.traveler.db.tables.TravelerUser;
import fi.istrange.traveler.db.tables.records.TravelerUserRecord;

import java.sql.Date;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TravelerUserDao extends DAOImpl<TravelerUserRecord, fi.istrange.traveler.db.tables.pojos.TravelerUser, String> {

    /**
     * Create a new TravelerUserDao without any configuration
     */
    public TravelerUserDao() {
        super(TravelerUser.TRAVELER_USER, fi.istrange.traveler.db.tables.pojos.TravelerUser.class);
    }

    /**
     * Create a new TravelerUserDao with an attached configuration
     */
    public TravelerUserDao(Configuration configuration) {
        super(TravelerUser.TRAVELER_USER, fi.istrange.traveler.db.tables.pojos.TravelerUser.class, configuration);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected String getId(fi.istrange.traveler.db.tables.pojos.TravelerUser object) {
        return object.getUsername();
    }

    /**
     * Fetch records that have <code>username IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByUsername(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.USERNAME, values);
    }

    /**
     * Fetch a unique record that has <code>username = value</code>
     */
    public fi.istrange.traveler.db.tables.pojos.TravelerUser fetchOneByUsername(String value) {
        return fetchOne(TravelerUser.TRAVELER_USER.USERNAME, value);
    }

    /**
     * Fetch records that have <code>birth IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByBirth(Date... values) {
        return fetch(TravelerUser.TRAVELER_USER.BIRTH, values);
    }

    /**
     * Fetch records that have <code>gender IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByGender(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.GENDER, values);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByEmail(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.EMAIL, values);
    }

    /**
     * Fetch records that have <code>phone IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByPhone(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.PHONE, values);
    }

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByAddress(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.ADDRESS, values);
    }

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByCity(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.CITY, values);
    }

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByCountry(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.COUNTRY, values);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByFirstName(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<fi.istrange.traveler.db.tables.pojos.TravelerUser> fetchByLastName(String... values) {
        return fetch(TravelerUser.TRAVELER_USER.LAST_NAME, values);
    }
}
