/*
 * This file is generated by jOOQ.
*/
package fi.istrange.traveler.db.tables;


import fi.istrange.traveler.db.Keys;
import fi.istrange.traveler.db.Public;
import fi.istrange.traveler.db.tables.records.CardRecord;
import org.jooq.*;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.math.BigDecimal;
import java.sql.Date;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Card extends TableImpl<CardRecord> {

    private static final long serialVersionUID = -2035409179;

    /**
     * The reference instance of <code>public.card</code>
     */
    public static final Card CARD = new Card();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CardRecord> getRecordType() {
        return CardRecord.class;
    }

    /**
     * The column <code>public.card.id</code>.
     */
    public final TableField<CardRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('card_id_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.card.start_time</code>.
     */
    public final TableField<CardRecord, Date> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.card.end_time</code>.
     */
    public final TableField<CardRecord, Date> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>public.card.lon</code>.
     */
    public final TableField<CardRecord, BigDecimal> LON = createField("lon", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 7), this, "");

    /**
     * The column <code>public.card.lat</code>.
     */
    public final TableField<CardRecord, BigDecimal> LAT = createField("lat", org.jooq.impl.SQLDataType.NUMERIC.precision(10, 7), this, "");

    /**
     * The column <code>public.card.owner_fk</code>.
     */
    public final TableField<CardRecord, String> OWNER_FK = createField("owner_fk", org.jooq.impl.SQLDataType.VARCHAR.length(80).nullable(false), this, "");

    /**
     * The column <code>public.card.active</code>.
     */
    public final TableField<CardRecord, Boolean> ACTIVE = createField("active", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>public.card.title</code>.
     */
    public final TableField<CardRecord, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>public.card.description</code>.
     */
    public final TableField<CardRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(700), this, "");

    /**
     * Create a <code>public.card</code> table reference
     */
    public Card() {
        this("card", null);
    }

    /**
     * Create an aliased <code>public.card</code> table reference
     */
    public Card(String alias) {
        this(alias, CARD);
    }

    private Card(String alias, Table<CardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Card(String alias, Table<CardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CardRecord, Long> getIdentity() {
        return Keys.IDENTITY_CARD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CardRecord> getPrimaryKey() {
        return Keys.CARD_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CardRecord>> getKeys() {
        return Arrays.<UniqueKey<CardRecord>>asList(Keys.CARD_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<CardRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CardRecord, ?>>asList(Keys.CARD__CARD_OWNER_FK_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Card as(String alias) {
        return new Card(alias, this);
    }

    /**
     * Rename this table
     */
    public Card rename(String name) {
        return new Card(name, null);
    }
}
